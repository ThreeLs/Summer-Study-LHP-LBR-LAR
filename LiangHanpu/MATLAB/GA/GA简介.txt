遗传算法的用途与性质：
    遗传算法主要用于求已知函数或者已知模型的最优值（最大值或者最小值），但是因为算法本身随意寻找最优解的特性，存在有一定几率会陷入局部最优解，而不是全局最优解的情况。

遗传算法简介：
    1，种群个体：
        每一个种群个体都表示这一种“染色体”，即该模型中的一个解。模型中每个变量都代表着染色体上的一个节点。因此模型有几个变量就有几个节点。
        这个解带入到模型之中解出来的值被称为“适应度”，也就是模型的值。因此“最优适应度”即“最优解”。
        染色体的表达方式有很多种，比如说：
            1）二进制表达，将模型中的所有变量的值转化为二进制，这样从变异的角度上看是比较好的，但是因为存在一个“十进制转二进制”的过程，因此我不是很推荐。
            2）用一个向量表示，即Chrom = [x_1, x_2, x_3]，这就代表一个个体的染色体情况，看上去简单易懂。
        因此可以将染色体和适应度综合到一个向量内，即Chrom = [x_1, x_2, x_3, Fitness]。
    2，种群：
        种群是种群个体的集合，因此我们一个包含了N个个体，每个个体有M个染色体节点的种群可以用一个N*(M+1)矩阵表示，即：
        allChrom = [x_11, x_12, x_13, ..., x_1M, Fitness_1;
                    x_21, x_22, x_23, ..., x_2M, Fitness_2;
                    ...
                    x_N1, x_N2, x_N3, ..., x_NM, Fitness_N];
        其中，每一行代表一个个体（该个体的编号可以看作是所处行数），第M+1列代表种群中的所有适应度。
        因此最优适应度与其编号为：[bestFitness, bestNum] = max(allChrom(:,M+1));, 当适应度越大越好时用max, 越小越好时用min。
        因此这个种群的平均适应度为：aveFitness = sum(allChrom(:,M+1)) / N;
    3，种群迭代：
        令种群迭代iter次，每一次迭代，就代表着完成了一次遗传算法的步骤，包括：1）染色体突变，2）染色体交叉，3）将最劣染色体替换为最优染色体。
        因为每一代中的种群的最优适应度与平均适应度都在变化，因此为了观察在迭代过程中的适应度的变化，需要保存每一代的最优染色体与平均染色体，方便做图使用。
        即两个向量： allBestFitness = [bestFitness_1, bestFitness_1, ..., bestFitness_iter];
                    allAveFitness = [aveFitness_1, aveFitness_2, ..., aveFitness_iter];
    4，染色体突变：
        存在一个变异概率mutPro，在一次迭代内，对种群内每个个体来进行一次判定。对于某个个体，产生一个随机数，当这个随机数小于mutPro时，则进行突变。
        突变时，产生一个1-M的随机整数，该整数就是所要变异的节点。
        对于该节点，假设其本身的值为x，这个染色体适应度为fitness，上一次迭代（即当前种群）的最优适应度为bestFitness。产生一个0-1的随机数random，则其新的节点值为：newX = x+x*random*(1-Fitness/bestFitness)^2。
        其中(1-Fitness/bestFitness)^2的意思为：当Fitness越趋近于最优适应度bestFitness时，Fitness/bestFitness越趋近于1，则(1-Fitness/bestFitness)则越小，再加个平方，令其更小（加平方是经验所得，如果不加平方，那么便宜幅度就会很大，容易出现局部最优解）。
        因此令x*random*(1-Fitness/bestFitness)^2称为“变异步长”，当适应度越趋近于最优解，则步长越小，否则步长越大。
        我们再产生一个0-1的随机数r，如果r < 0.5，则原节点值x-newX，否则x+newX。
        但是因为是随机产生的，newX很有可能会超出我们想要的这个变量的范围，如x属于[0, 10]区间内，但是在突变后变成了11，那么就需要一个“越界判定”。
        令这个变量的范围为[leftRange, rightRange]，当newX < leftRange时，令newX = leftRange; 当newX > rightRange时，令newX = rightRange。其他不需要变化。
    5，染色体交叉：
        存在一个交叉概率croPro，在一次迭代中对所有个体进行判定。判定条件同染色体突变。
        当某个个体被确定要产生突变后，产生一个1-N的随机整数，寻找与其进行交换的另一个个体。
        在产生一个1-M的随机整数，确定两个个体的染色体要交换的染色体节点位置。并进行交换。
    6，替换最劣染色体：
        当突变与交叉这两个过程完成后，计算当前种群的适应度。之后寻找最优与最劣染色体适应度，并计算平均适应度。
        将最劣染色体的Chrom直接替换成为最优染色体的Chrom，这样可以令种群适应度的整体水平上升一次，相当于“杀死最差的个体，繁殖最优的个体”。
    以上就是大致过程。具体内容还应当根据我的程序来进行研究与实现。
